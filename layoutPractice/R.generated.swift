//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let reuseIdentifier = reuseIdentifier()

  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `DarkPrimaryColor`.
    var darkPrimaryColor: RswiftResources.ColorResource { .init(name: "DarkPrimaryColor", path: [], bundle: bundle) }

    /// Color `PrimaryColor`.
    var primaryColor: RswiftResources.ColorResource { .init(name: "PrimaryColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 19 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `Apple-logo`.
    var appleLogo: RswiftResources.ImageResource { .init(name: "Apple-logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Gmail-logo`.
    var gmailLogo: RswiftResources.ImageResource { .init(name: "Gmail-logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Google-logo`.
    var googleLogo: RswiftResources.ImageResource { .init(name: "Google-logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Yahoo-Logo`.
    var yahooLogo: RswiftResources.ImageResource { .init(name: "Yahoo-Logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `blacktop`.
    var blacktop: RswiftResources.ImageResource { .init(name: "blacktop", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `brucellatop`.
    var brucellatop: RswiftResources.ImageResource { .init(name: "brucellatop", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `coffeetop`.
    var coffeetop: RswiftResources.ImageResource { .init(name: "coffeetop", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `flipkartassured`.
    var flipkartassured: RswiftResources.ImageResource { .init(name: "flipkartassured", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `greentop`.
    var greentop: RswiftResources.ImageResource { .init(name: "greentop", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconofperson`.
    var iconofperson: RswiftResources.ImageResource { .init(name: "iconofperson", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `launchScreen`.
    var launchScreen: RswiftResources.ImageResource { .init(name: "launchScreen", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `levels`.
    var levels: RswiftResources.ImageResource { .init(name: "levels", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `maroontop`.
    var maroontop: RswiftResources.ImageResource { .init(name: "maroontop", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `orangetop`.
    var orangetop: RswiftResources.ImageResource { .init(name: "orangetop", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `pinktop`.
    var pinktop: RswiftResources.ImageResource { .init(name: "pinktop", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `redtop`.
    var redtop: RswiftResources.ImageResource { .init(name: "redtop", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `whitetop`.
    var whitetop: RswiftResources.ImageResource { .init(name: "whitetop", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `women4`.
    var women4: RswiftResources.ImageResource { .init(name: "women4", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `women5`.
    var women5: RswiftResources.ImageResource { .init(name: "women5", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
            var uiSceneStoryboardFile: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneStoryboardFile") ?? "FlipkartStoryboard" }
          }
        }
      }
    }
  }

  /// This `_R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `ClothesCollectionViewCell`.
    var clothesCollectionViewCell: RswiftResources.NibReferenceReuseIdentifier<ClothesCollectionViewCell, ClothesCollectionViewCell> { .init(name: "ClothesCollectionViewCell", bundle: bundle, identifier: "ClothesCollectionViewCell") }

    /// Nib `FeatureJobCellTableViewCell`.
    var featureJobCellTableViewCell: RswiftResources.NibReference<UIKit.UITableViewCell> { .init(name: "FeatureJobCellTableViewCell", bundle: bundle) }

    /// Nib `FeaturejobCollectionViewCell`.
    var featurejobCollectionViewCell: RswiftResources.NibReferenceReuseIdentifier<FeaturejobCVC, FeaturejobCVC> { .init(name: "FeaturejobCollectionViewCell", bundle: bundle, identifier: "featureCollectionCell") }

    /// Nib `HeaderFlipkart`.
    var headerFlipkart: RswiftResources.NibReferenceReuseIdentifier<CollectionReusableView, CollectionReusableView> { .init(name: "HeaderFlipkart", bundle: bundle, identifier: "HeaderFlipkart") }

    func validate() throws {
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "heart.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'heart.fill' is used in nib 'ClothesCollectionViewCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "women4", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'women4' is used in nib 'ClothesCollectionViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.down.doc") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.down.doc' is used in nib 'HeaderFlipkart', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "line.3.horizontal.decrease") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'line.3.horizontal.decrease' is used in nib 'HeaderFlipkart', but couldn't be loaded.") } }
    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 5 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `ClothesCollectionViewCell`.
    let clothesCollectionViewCell: RswiftResources.ReuseIdentifier<ClothesCollectionViewCell> = .init(identifier: "ClothesCollectionViewCell")

    /// Reuse identifier `featureCollectionCell`.
    let featureCollectionCell: RswiftResources.ReuseIdentifier<FeaturejobCVC> = .init(identifier: "featureCollectionCell")

    /// Reuse identifier `featurejobcell`.
    let featurejobcell: RswiftResources.ReuseIdentifier<FeatureJobCellTableViewCell> = .init(identifier: "featurejobcell")

    /// Reuse identifier `HeaderFlipkart`.
    let headerFlipkart: RswiftResources.ReuseIdentifier<CollectionReusableView> = .init(identifier: "HeaderFlipkart")

    /// Reuse identifier `ProductsVCell`.
    let productsVCell: RswiftResources.ReuseIdentifier<ProductsImagesVCell> = .init(identifier: "ProductsVCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var collectionViewStoryboard: collectionViewStoryboard { .init(bundle: bundle) }
    var flipkartStoryboard: flipkartStoryboard { .init(bundle: bundle) }
    var homepage: homepage { .init(bundle: bundle) }
    var jobStoryboard: jobStoryboard { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }

    func collectionViewStoryboard(bundle: Foundation.Bundle) -> collectionViewStoryboard {
      .init(bundle: bundle)
    }
    func flipkartStoryboard(bundle: Foundation.Bundle) -> flipkartStoryboard {
      .init(bundle: bundle)
    }
    func homepage(bundle: Foundation.Bundle) -> homepage {
      .init(bundle: bundle)
    }
    func jobStoryboard(bundle: Foundation.Bundle) -> jobStoryboard {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.collectionViewStoryboard.validate()
      try self.flipkartStoryboard.validate()
      try self.homepage.validate()
      try self.jobStoryboard.validate()
      try self.launchScreen.validate()
      try self.main.validate()
    }


    /// Storyboard `CollectionViewStoryboard`.
    struct collectionViewStoryboard: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = CollectionViewVC

      let bundle: Foundation.Bundle

      let name = "CollectionViewStoryboard"
      func validate() throws {
        if UIKit.UIImage(named: "ig", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ig' is used in storyboard 'CollectionViewStoryboard', but couldn't be loaded.") }
        if UIKit.UIColor(named: "PrimaryColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'PrimaryColor' is used in storyboard 'CollectionViewStoryboard', but couldn't be loaded.") }
      }
    }

    /// Storyboard `FlipkartStoryboard`.
    struct flipkartStoryboard: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "FlipkartStoryboard"

      var productVC: RswiftResources.StoryboardViewControllerIdentifier<ProductVC> { .init(identifier: "ProductVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "cart.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'cart.fill' is used in storyboard 'FlipkartStoryboard', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "flipkartassured", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'flipkartassured' is used in storyboard 'FlipkartStoryboard', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "magnifyingglass") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'magnifyingglass' is used in storyboard 'FlipkartStoryboard', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "maroontop", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'maroontop' is used in storyboard 'FlipkartStoryboard', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "star.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'star.fill' is used in storyboard 'FlipkartStoryboard', but couldn't be loaded.") } }
        if productVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'productVC' could not be loaded from storyboard 'FlipkartStoryboard' as 'ProductVC'.") }
      }
    }

    /// Storyboard `Homepage`.
    struct homepage: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Homepage"
      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "person.badge.plus.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'person.badge.plus.fill' is used in storyboard 'Homepage', but couldn't be loaded.") } }
        if UIKit.UIColor(named: "PrimaryColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'PrimaryColor' is used in storyboard 'Homepage', but couldn't be loaded.") }
      }
    }

    /// Storyboard `JobStoryboard`.
    struct jobStoryboard: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = MeetrajVC

      let bundle: Foundation.Bundle

      let name = "JobStoryboard"
      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'circle.fill' is used in storyboard 'JobStoryboard', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "person.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'person.fill' is used in storyboard 'JobStoryboard', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "slider.vertical.3") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'slider.vertical.3' is used in storyboard 'JobStoryboard', but couldn't be loaded.") } }
      }
    }

    /// Storyboard `Launch Screen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "Launch Screen"
      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'plus' is used in storyboard 'Launch Screen', but couldn't be loaded.") } }
        if UIKit.UIColor(named: "PrimaryColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'PrimaryColor' is used in storyboard 'Launch Screen', but couldn't be loaded.") }
      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Main"
      func validate() throws {

      }
    }
  }
}